Before you begin:

    To build the Apache filter you need Apache 1.3.X.  Support for
    Apache 2.0 will be available in a later release.  Your web
    server should have SSL enabled.

    You will need OpenSSL 0.9.7a or newer.

    You will need a source of entropy for the OpenSSL libraries to
    work.  If your system has /dev/*random then you're all set,
    otherwise you should get something like prngd or egd.  Solaris
    users should refer to document 27606 "Differing /dev/random
    support requirements within Solaris [TM] Operating Environments"
    at <http://sunsolve.sun.com/>.  AIX users will want to get
    prngd.

    You almost certainly do not need Kerberos installed on your
    machine unless you are building the central server.  If you
    are building a central server, you will need MIT krb5-1.2.7 or
    later. See README.weblogin for further information.

    For documentation and information concerning cosign terminology,
    see: http://weblogin.org/

Set up a cosign-protected service:

    To build the Apache authentication filter:

	./configure
	make
	make install
	mkdir -p /var/cosign/filter
	chown APACHE_USER /var/cosign/filter

    'make install' will install the filter using your copy of apxs.  Be
    sure to change APACHE_USER to the username defined in your
    httpd.conf file.

	--with-filterdb=DIR overrides the default of /var/cosign/filter

    To do this by hand, copy mod_cosign.so to apache's libexec
    directory. Edit httpd.conf to include:


	LoadModule cosign_module      libexec/mod_cosign.soA
	AddModule mod_cosign.c

    Finally, create a CA directory to hold your CA certificates.  Copy
    the CAs ( see the CAcerts directory in the root of the cosign
    source distribution ) to your CA dir and issue the c_rehash command
    ( c_rehash is a perl script that ships with openssl ).  If you
    choose to store your certs in '/usr/local/etc/apache/certs' then
    the commands would be:

	mkdir -p /usr/local/etc/apache/certs
	cp CAcerts/* /usr/local/etc/apache/certs
	c_rehash /usr/local/etc/apache/certs

    output should look like:
	Doing /usr/local/etc/apache/certs
	umwebCA.pem => 4700e8dd.0
	RSA-SSCA.pem => f73e89fd.0
	entrust.pem => ed524cf5.0

Configure Apache ( U of M specific example ):

    In the U of M environment, you'll want your directives to look like
    this:

    On your http ( port 80 ) side, and any dirs or locations you want exempt:

	CosignProtected		Off

    in :443 ( or otherwise https ) vhost

	CosignProtected		On
	CosignHostname		weblogin.umich.edu
	CosignRedirect		https://weblogin.umich.edu/
	CosignPostErrorRedirect https://weblogin.umich.edu/post_error.html
	CosignService		<e-mail to cosign@umich.edu and we will assign>
	CosignCrypto		<path to key> <path to cert> <path to CA dir>

    NOTE: trailing slash is required on CosignRedirect! The redirects
    won't work correctly without it.

--------
Configure Apache ( here are your options ):

	CosignProtected		[ on | off ]
	    governs whether Cosign is invoked or not

	CosignHostname		[ the name of the host running cosignd ]
	CosignRedirect		[ the URL of the cosign login cgi ]
	CosignPostErrorRedirect	[ the URL to redirect to if the user
				would be redirected to the login cgi
				during a POST. This screen lets people
				know we dropped their data. ]
	CosignService		[ a unique identifier for... ]
	CosignCrypto		[path to key] [path to cert] [path to CA dir]

--------
To make Kerberos work with the module, you'll need the following options:

    --enable-krb=path_to_krb5	enables Kerberos V
    --with-krb4			enables Kerberos IV
    --with-GSS			enables GSSAPI ( see directive below )


	CosignGetKerberosTickets	[ on | off ]
	    module asks for tgt from cosignd

	CosignKerberos524		[ on | off ]	
	    whether you want K5 tgt converted to K4 tgt

	CosignKerberosSetupGSS		[ on | off ]
		setup the enviornment so that other apache modules
		that need GSSAPI/Kerberos work. e.g. Imp running under mod_php

