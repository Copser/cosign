Before you begin:

    To build the Apache filter you need Apache 1.3.X.  Support for
    Apache 2.0 will be available in a later release.  Your web
    server should have SSL enabled.

    You will need OpenSSL 0.9.7a or newer.

    You will need a source of entropy for the OpenSSL libraries to
    work.  If your system has /dev/*random then you're all set,
    otherwise you should get something like prngd or egd.  Solaris
    users should refer to document 27606 "Differing /dev/random
    support requirements within Solaris [TM] Operating Environments"
    at <http://sunsolve.sun.com/>.  AIX users will want to get
    prngd.

    You almost certainly do not need Kerberos installed on your
    machine unless you are building the central server.  If you
    are building a central server, you will need MIT krb5-1.2.7 or
    later.

    For documentation and information concerning cosign terminology,
    see: http://weblogin.org/

Set up a cosign-protected service:

    To build the Apache authentication filter:

	./configure
	make
	make install
	mkdir -p /var/cosign/filter
	chown APACHE_USER /var/cosign/filter

    'make install' will install the filter using your copy of apxs.  Be
    sure to change APACHE_USER to the username defined in your
    httpd.conf file.

    Finally, create a CA directory to hold your CA certificates.  Copy
    the CAs ( see the CAcerts directory in the root of the cosign
    source distribution ) to your CA dir and issue the c_rehash command
    ( c_rehash is a perl script that ships with openssl ).  If you
    choose to store your certs in '/usr/local/etc/apache/certs' then
    the commands would be:

	mkdir -p /usr/local/etc/apache/certs
	cp CAcerts/* /usr/local/etc/apache/certs
	c_rehash /usr/local/etc/apache/certs

    output should look like:
	Doing /usr/local/etc/apache/certs
	umwebCA.pem => 4700e8dd.0
	RSA-SSCA.pem => f73e89fd.0
	entrust.pem => ed524cf5.0

Configure Apache:

    In the U of M environment, you'll want your directives to look like
    this:

    On your http ( port 80 ) side, and any dirs or locations you want exempt:

	CosignProtected		Off

    in :443 ( or otherwise https ) vhost

	CosignProtected		On
	CosignHostname		weblogin.umich.edu
	CosignRedirect		https://weblogin.umich.edu/
	CosignPostErrorRedirect https://weblogin.umich.edu/post_error.html
	CosignService		<e-mail to cosign@umich.edu and we will assign>
	CosignCrypto		<path to key> <path to cert> <path to CA dir>

    NOTE: trailing slash is required on CosignRedirect! The redirects
    won't work correctly without it.

To set up a central cosign server ( the weblogin server ):
    Note that you should only need this if you are establishing a new
    SSO community for which you will be providing the central login
    server.

	./configure --enable-krb=/path/to/krb5
	make everything
	make install-all
	mkdir -p /var/cosign/daemon
	chown DAEMON_USER /var/cosign/daemon
    
    The daemon (cosignd) requires  /var/cosign/daemon to exist and be
    writeable by the user the daemon runs as.

    --with-cosigndb=DIR overrides /var/cosign/daemon
    --with-cosignconf=FILE -> allows you to specify new conf file location
	    default is /usr/local/etc/cosign.conf
    --with-cosigncadir=DIR	default=/var/cosign/certs/CA 
    --with-cosigncert=FILE	default=/var/cosign/certs/cert.pem
    --with-cosignkey=FILE	default=/var/cosign/certs/key.pem

Contact webmaster@umich.edu for umich CA signed certs, which are free!

Questions? cosign@umich.edu
