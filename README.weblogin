Before you begin:

    For documentation and information concerning cosign terminology,
    see: http://weblogin.org/

    Your web server should have SSL enabled.

    You will need OpenSSL 0.9.7a or newer.

    You will need a source of entropy for the OpenSSL libraries to
    work.  If your system has /dev/*random then you're all set,
    otherwise you should get something like prngd or egd.  Solaris
    users should refer to document 27606 "Differing /dev/random
    support requirements within Solaris [TM] Operating Environments"
    at <http://sunsolve.sun.com/>.  AIX users will want to get
    prngd.

    You will need MIT krb5-1.2.7 or later.

To build the central cosign server ( the weblogin server ):
    Note that you should only need this if you are establishing a new
    SSO community for which you will be providing the central login
    server.

	./configure --enable-krb=/path/to/krb5
	make everything
	make install-all
	mkdir -p /var/cosign/daemon
	chown DAEMON_USER /var/cosign/daemon
    
    The daemon (cosignd) requires  /var/cosign/daemon to exist and be
    writeable by the user the daemon runs as, by default "cosign".

    Also, in order to avoid the warning:

	cosignd: can't find cosign service 

    add cosign to /etc/services on port 6663/tcp ( the default ) or
    whatever port you are running it on.

    If you are using Kerberos, create a /ticket and change the permissions
    so the webserver and the daemon can write there.

Testing your certificates:

    You want to make sure that the certs you have are able to be used as
    both a server ( weblogin server ) and a client ( cosign.cgi ). Debugging
    certificate problems is the hardest thing to do, and checking now saves
    a lot of anguish later.

	openssl verify -verbose -purpose sslclient -CApath /var/cosign/certs/CA /var/cosign/certs/cert.pem

	openssl verify -verbose -purpose sslserver -CApath /var/cosign/certs/CA /var/cosign/certs/cert.pem


Customizing your html:

    Before doing a 'make everything' and certainly before doing a 'make
    install-all,' be sure to customize the contents of 'html/header.html,
    'html/footer.html,' and 'html/cosign.css.'  You can, of course,
    customize the other templates as well but be careful with the variable
    display strings ( of the form '$a' where 'a' can be any letter or
    number ).  These are needed by the CGI.

Things to know about the CGI:

    You'll need a keytab with the principal of "cosign" and the
    instance of the hostname of the machine that the cgi will run on.

    The required html and templates for the cgi ( login page, logout
    page, etc. ) live in ${prefix}/html and ${prefix}/templates. You
    will most likely want to localize these pages.

    We use a trick so that cosign.cgi will run from DocumentRoot. In
    order to make this work, you need to make 3 changes to the default
    httpd.conf:

	DirectoryIndex      cosign.cgi index.php index.html
	AddHandler          cgi-script      .cgi

	#replace this directory with your document root
	<Directory /usr/local/projects/cosign/html>
	    Options ExecCGI
	</Directory>

    If you choose to install the cgi in a subdirectory (e.g. /login/)
    be sure to have the action of your form end in a trailing '/'

Creating cosign.conf file:

    The last thing you need to do before starting up your cosign server
    is create the cosign.conf file:

          #
          # keyword           subject cn               get tickets?
          #
          cgi                 cosignserver.umich.edu
          service             servicea.web.umich.edu        0
          service             serviceb.web.umich.edu        0
          service             campusmail.umich.edu          1
          service             alumni.web.mgoblue.com        0
          service             *.web.umich.edu               0

    The default location for this file is /etc/cosign.conf.  See the
    cosignd man page for more information.

Scripts

    See the scripts/ directory in the cosign source distribution for an
    example cosignd startup script, a cron job to clean up your cookie
    database (if you are not using replication), and several example
    logout scripts.

Setting up an example protected service:

    It may be useful to run both the cgi/daemon and the filter on a single
    server. To test a cosign filter installation on the cosign server,
    you'll need some special configuration options, like so:

    in your server root, turn Cosign protection on:
	CosignProtected On

    in your document root, turn Cosign Protected Off:

	<Directory /usr/local/projects/cosign/html>
	    Options ExecCGI
	    CosignProtected Off
	</Directory>

    Then turn a specific location, like /services/, on

	<Location /services/>
	    CosignProtected On
	</Location>

    This will make it so the cgi can run when you are not logged in,
    but that in order to access /services/ you must be logged in. More
    complicated configurations are possible, but this is a basic one
    to get you going.  The distribution includes a sample /services/
    directory for testing.

Configure Options:

    --with-cosignhost=NAME  	default=cosign.example.edu
    --with-cosignlogouturl=URL	default=http://cosign.example.edu
    --with-cosigndb=DIR 	overrides /var/cosign/daemon
    --with-cosignconf=FILE	specify new conf file location
    --with-cosigncadir=DIR	default=/var/cosign/certs/CA 
    --with-cosigncert=FILE	default=/var/cosign/certs/cert.pem
    --with-cosignkey=FILE	default=/var/cosign/certs/key.pem
    --with-keytabpath=FILE 	default=NULL ( which means use whatever
					the krb5.conf says to use )

    The certificate CN of the weblogin server must match the argument
    to --with-cosignhost.

Questions?

    cosign-discuss@umich.edu
